// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/root-server.proto

package root_server_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RootServer_GetRootServerConfiguration_FullMethodName = "/rschoonheim.mtls.v1.root_server.RootServer/GetRootServerConfiguration"
)

// RootServerClient is the client API for RootServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootServerClient interface {
	// GetRootServerConfiguration - returns the current configuration of the root server.
	GetRootServerConfiguration(ctx context.Context, in *RootServerConfiguration, opts ...grpc.CallOption) (*RootServerConfiguration, error)
}

type rootServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRootServerClient(cc grpc.ClientConnInterface) RootServerClient {
	return &rootServerClient{cc}
}

func (c *rootServerClient) GetRootServerConfiguration(ctx context.Context, in *RootServerConfiguration, opts ...grpc.CallOption) (*RootServerConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RootServerConfiguration)
	err := c.cc.Invoke(ctx, RootServer_GetRootServerConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootServerServer is the server API for RootServer service.
// All implementations must embed UnimplementedRootServerServer
// for forward compatibility.
type RootServerServer interface {
	// GetRootServerConfiguration - returns the current configuration of the root server.
	GetRootServerConfiguration(context.Context, *RootServerConfiguration) (*RootServerConfiguration, error)
	mustEmbedUnimplementedRootServerServer()
}

// UnimplementedRootServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRootServerServer struct{}

func (UnimplementedRootServerServer) GetRootServerConfiguration(context.Context, *RootServerConfiguration) (*RootServerConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootServerConfiguration not implemented")
}
func (UnimplementedRootServerServer) mustEmbedUnimplementedRootServerServer() {}
func (UnimplementedRootServerServer) testEmbeddedByValue()                    {}

// UnsafeRootServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootServerServer will
// result in compilation errors.
type UnsafeRootServerServer interface {
	mustEmbedUnimplementedRootServerServer()
}

func RegisterRootServerServer(s grpc.ServiceRegistrar, srv RootServerServer) {
	// If the following call pancis, it indicates UnimplementedRootServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RootServer_ServiceDesc, srv)
}

func _RootServer_GetRootServerConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootServerConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootServerServer).GetRootServerConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootServer_GetRootServerConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootServerServer).GetRootServerConfiguration(ctx, req.(*RootServerConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

// RootServer_ServiceDesc is the grpc.ServiceDesc for RootServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RootServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rschoonheim.mtls.v1.root_server.RootServer",
	HandlerType: (*RootServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRootServerConfiguration",
			Handler:    _RootServer_GetRootServerConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/root-server.proto",
}
